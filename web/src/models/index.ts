// Code generated by tygo. DO NOT EDIT.
// Code generated by tygo. DO NOT EDIT.

//////////
// source: account.go

/**
 * AccountSettings contains account settings
 */
export interface AccountSettings {
  email: EmailSettings;
  storage: StorageSettings;
  webhook: WebhookSettings;
  branding: BrandingSettings;
}
/**
 * EmailSettings email configuration
 */
export interface EmailSettings {
  provider: string; // smtp, sendgrid, mailgun, ses
  smtp_host?: string;
  smtp_port?: number /* int */;
  smtp_user?: string;
  smtp_pass?: string;
  from_email: string;
  from_name: string;
}
/**
 * StorageSettings storage configuration
 */
export interface StorageSettings {
  provider: string; // local, s3, gcs, azure
  bucket?: string;
  region?: string;
  config?: { [key: string]: string}; // additional settings
}
/**
 * WebhookSettings webhook configuration
 */
export interface WebhookSettings {
  enabled: boolean;
  max_retries: number /* int */;
  timeout: number /* int */; // in seconds
}
/**
 * BrandingSettings branding configuration
 */
export interface BrandingSettings {
  logo_url?: string;
  primary_color?: string;
  company_name?: string;
}
/**
 * Account represents an account
 */
export interface Account {
  id: string;
  name: string;
  timezone: string;
  locale: string;
  settings?: AccountSettings;
  created_at: string;
  updated_at: string;
}

//////////
// source: apikey.go

/**
 * APIKey represents an API key for authentication
 */
export interface APIKey {
  id: string;
  account_id: string;
  name: string;
  enabled: boolean;
  last_used_at?: string;
  expires_at?: string;
  created_at: string;
  updated_at: string;
}
/**
 * APIKeyWithPlainKey is used only when creating a new key
 */
export interface APIKeyWithPlainKey {
  APIKey: APIKey;
  api_key: string; // shown only once during creation
}

//////////
// source: auth.go

/**
 * SignIn represents user login request
 */
export interface SignIn {
  email: string;
  password: string;
  code?: string; // 2FA code if enabled
}
/**
 * SignUp represents user registration request
 */
export interface SignUp {
  email: string;
  password: string;
  first_name: string;
  last_name: string;
}
/**
 * ForgotPassword represents password reset request
 */
export interface ForgotPassword {
  email: string;
}
/**
 * ResetPassword represents password reset confirmation
 */
export interface ResetPassword {
  token: string;
  new_password: string;
}
/**
 * VerifyEmail represents email verification request
 */
export interface VerifyEmail {
  token: string;
}
/**
 * Enable2FA represents 2FA enable request
 */
export interface Enable2FA {
  password: string;
}
/**
 * Verify2FA represents 2FA verification request
 */
export interface Verify2FA {
  code: string;
}
/**
 * Disable2FA represents 2FA disable request
 */
export interface Disable2FA {
  password: string;
  code: string;
}
/**
 * TwoFactorSetupResponse represents 2FA setup response
 */
export interface TwoFactorSetupResponse {
  secret: string;
  qr_code: string; // Base64 encoded QR code image
}
/**
 * OAuthCallback represents OAuth callback data
 */
export interface OAuthCallback {
  provider: string;
  code: string;
  state: string;
}

//////////
// source: event.go

/**
 * Event represents universal event logging
 */
export interface Event {
  id: string;
  type: string; // submission.created, submitter.completed, etc.
  actor_id?: string;
  resource_type: string; // submission, submitter, template, etc.
  resource_id: string;
  metadata: { [key: string]: any};
  ip?: string;
  created_at: string;
}
/**
 * EventType constants for event types
 */
export const EventSubmissionCreated = "submission.created";
/**
 * EventType constants for event types
 */
export const EventSubmissionSent = "submission.sent";
/**
 * EventType constants for event types
 */
export const EventSubmissionCompleted = "submission.completed";
/**
 * EventType constants for event types
 */
export const EventSubmissionExpired = "submission.expired";
/**
 * EventType constants for event types
 */
export const EventSubmissionCancelled = "submission.cancelled";
/**
 * EventType constants for event types
 */
export const EventSubmitterSent = "submitter.sent";
/**
 * EventType constants for event types
 */
export const EventSubmitterOpened = "submitter.opened";
/**
 * EventType constants for event types
 */
export const EventSubmitterCompleted = "submitter.completed";
/**
 * EventType constants for event types
 */
export const EventSubmitterDeclined = "submitter.declined";
/**
 * EventType constants for event types
 */
export const EventTemplateCreated = "template.created";
/**
 * EventType constants for event types
 */
export const EventTemplateUpdated = "template.updated";
/**
 * EventType constants for event types
 */
export const EventTemplateDeleted = "template.deleted";

//////////
// source: notification.go

/**
 * NotificationType represents the type of notification
 */
export type NotificationType = string;
export const NotificationTypeEmail: NotificationType = "email";
export const NotificationTypeSMS: NotificationType = "sms";
export const NotificationTypeReminder: NotificationType = "reminder";
/**
 * NotificationStatus represents notification status
 */
export type NotificationStatus = string;
export const NotificationStatusPending: NotificationStatus = "pending";
export const NotificationStatusSending: NotificationStatus = "sending";
export const NotificationStatusSent: NotificationStatus = "sent";
export const NotificationStatusFailed: NotificationStatus = "failed";
export const NotificationStatusCancelled: NotificationStatus = "cancelled";
/**
 * Notification represents a universal model for all notification types
 */
export interface Notification {
  id: string;
  type: NotificationType;
  recipient: string;
  template: string;
  subject?: string;
  body?: string;
  context: { [key: string]: any};
  status: NotificationStatus;
  scheduled_at?: string;
  sent_at?: string;
  related_type?: string;
  related_id?: string;
  error_message?: string;
  retry_count: number /* int */;
  created_at: string;
  updated_at: string;
}

//////////
// source: sign.go

/**
 * Sign is ...
 */
export interface Sign {
  error?: string;
  file_name?: string;
  file_name_signed?: string;
}

//////////
// source: submission.go

/**
 * SubmissionStatus represents submission status
 */
export type SubmissionStatus = string;
export const SubmissionStatusDraft: SubmissionStatus = "draft";
export const SubmissionStatusPending: SubmissionStatus = "pending";
export const SubmissionStatusInProgress: SubmissionStatus = "in_progress";
export const SubmissionStatusCompleted: SubmissionStatus = "completed";
export const SubmissionStatusExpired: SubmissionStatus = "expired";
export const SubmissionStatusCancelled: SubmissionStatus = "cancelled";
/**
 * Submission represents a document for signing
 */
export interface Submission {
  id: string;
  template_id: string;
  account_id?: string;
  created_by_id?: string;
  status: SubmissionStatus;
  expired_at?: string;
  completed_at?: string;
  metadata?: { [key: string]: any};
  created_at: string;
  updated_at: string;
}

//////////
// source: template.go

/**
 * TemplateSettings contains template settings
 */
export interface TemplateSettings {
  embedding_enabled: boolean;
  webhook_enabled: boolean;
  expiration_days?: number /* int */;
  company_logo_id?: string;
  reminder_enabled: boolean;
  reminder_days?: number /* int */[]; // [1, 3, 7] - reminders after N days
}
/**
 * Template is ...
 */
export interface Template {
  id: string;
  folder_id: string;
  slug: string;
  name: string;
  description?: string;
  source?: string;
  author?: Author;
  submitters: Submitter[];
  fields: Field[];
  schema: Schema[];
  documents: Document[];
  settings?: TemplateSettings;
  created_at: string;
  updated_at: string;
  archived_at?: string;
}
/**
 * Author is ...
 */
export interface Author {
  id: string;
  first_name: string;
  last_name: string;
  email: string;
}
/**
 * SubmitterStatus represents signer status
 */
export type SubmitterStatus = string;
export const SubmitterStatusPending: SubmitterStatus = "pending";
export const SubmitterStatusOpened: SubmitterStatus = "opened";
export const SubmitterStatusCompleted: SubmitterStatus = "completed";
export const SubmitterStatusDeclined: SubmitterStatus = "declined";
/**
 * Submitter represents document signer
 */
export interface Submitter {
  id: string;
  name: string;
  email: string;
  phone?: string;
  slug: string; // unique signing link
  status: SubmitterStatus;
  submission_id: string;
  completed_at?: string;
  declined_at?: string;
  sent_at?: string;
  opened_at?: string;
  metadata?: { [key: string]: any};
  created_at: string;
  updated_at: string;
}
/**
 * FieldType represents field type in template
 */
export type FieldType = string;
/**
 * 14 field types for document templates
 */
export const FieldTypeSignature: FieldType = "signature";
/**
 * 14 field types for document templates
 */
export const FieldTypeInitials: FieldType = "initials";
/**
 * 14 field types for document templates
 */
export const FieldTypeDate: FieldType = "date";
/**
 * 14 field types for document templates
 */
export const FieldTypeText: FieldType = "text";
/**
 * 14 field types for document templates
 */
export const FieldTypeNumber: FieldType = "number";
/**
 * 14 field types for document templates
 */
export const FieldTypeCheckbox: FieldType = "checkbox";
/**
 * 14 field types for document templates
 */
export const FieldTypeRadio: FieldType = "radio";
/**
 * 14 field types for document templates
 */
export const FieldTypeSelect: FieldType = "select";
/**
 * 14 field types for document templates
 */
export const FieldTypeMultiSelect: FieldType = "multi_select";
/**
 * 14 field types for document templates
 */
export const FieldTypeFile: FieldType = "file";
/**
 * 14 field types for document templates
 */
export const FieldTypeImage: FieldType = "image";
/**
 * 14 field types for document templates
 */
export const FieldTypeCells: FieldType = "cells";
/**
 * 14 field types for document templates
 */
export const FieldTypeStamp: FieldType = "stamp";
/**
 * 14 field types for document templates
 */
export const FieldTypePayment: FieldType = "payment";
/**
 * Field is ...
 */
export interface Field {
  id: string;
  submitter_id: string;
  name: string;
  type: FieldType;
  required: boolean;
  default_value?: string;
  options?: string[]; // for select, radio
  validation?: string;
  areas?: (Areas | undefined)[];
}
/**
 * Areas is ...
 */
export interface Areas {
  attachment_id: string;
  page: number /* int */;
  x: number /* float64 */;
  y: number /* float64 */;
  w: number /* float64 */;
  z: number /* float64 */;
}
/**
 * Schema is ...
 */
export interface Schema {
  attachment_id: string;
  name: string;
}
/**
 * Document is ...
 */
export interface Document {
  id: string;
  url: string;
  filename?: string;
  metadata: DocMetadata;
  preview_images: PreviewImages[];
  created_at: string;
}
/**
 * DocMetadata is ...
 */
export interface DocMetadata {
  analyzed?: boolean;
  pdf: Pdf;
  sha256?: string;
}
/**
 * Pdf os ...
 */
export interface Pdf {
  annotations?: (Annotations | undefined)[];
  number_of_pages: number /* int */;
}
/**
 * Annotations is ...
 */
export interface Annotations {
  type: string;
  value: string;
  page: number /* int */;
  x: number /* float64 */;
  y: number /* float64 */;
  w: number /* float64 */;
  z: number /* float64 */;
}
/**
 * PreviewImages is ...
 */
export interface PreviewImages {
  id: string;
  record_type?: string;
  record_id?: string;
  blob_id?: string;
  metadata: ImgMetadata;
  filename: string;
}
/**
 * ImgMetadata is ...
 */
export interface ImgMetadata {
  analyzed?: boolean;
  identified?: boolean;
  width: number /* int */;
  height: number /* int */;
}

//////////
// source: user.go

export type UserRole = number /* int */;
export const UserRoleUser: UserRole = 1; // Regular user with basic permissions
export const UserRoleModerator: UserRole = 2; // Moderator with extended permissions
export const UserRoleAdmin: UserRole = 3; // Administrator with full access
/**
 * User is ...
 */
export interface User {
  id: string;
  name: string;
  email: string;
  password: string;
  CreatedAt: string;
}

//////////
// source: verify.go

/**
 * Verify is ...
 */
export interface Verify {
  verify: boolean;
  error?: string;
  document?: DocumentInfo;
  signers: (Signer | undefined)[];
}
/**
 * DocumentInfo is ...
 */
export interface DocumentInfo {
  creator: string;
  hash: string;
}
/**
 * Signer is ...
 */
export interface Signer {
  name: string;
  reason: string;
  valid_signature: boolean;
  trusted_issuer: TrustedIssuer;
  cert_subject?: CertSubject;
  sig_format: string;
  revoked_certificate: boolean;
  time_stamp?: TimeStamp;
}
/**
 * TrustedIssuer is ...
 */
export interface TrustedIssuer {
  valid: boolean;
  list: string;
  name: string;
}
/**
 * TimeStamp is ...
 */
export interface TimeStamp {
  time: number /* int64 */;
}
/**
 * CertSubject is ...
 */
export interface CertSubject {
  organization: string;
  common_name: string;
}
/**
 * TrustList is ...
 */
export interface TrustCerts {
  trust_cert: TrustCert[];
}
/**
 * TrustCert is ...
 */
export interface TrustCert {
  list: string;
  name: string;
  aki: string;
  ski: string;
  created?: string;
}

//////////
// source: webhook.go

/**
 * Webhook represents webhook endpoint for integrations
 */
export interface Webhook {
  id: string;
  account_id: string;
  url: string;
  events: string[]; // ["submission.created", "submission.completed", etc.]
  secret: string;
  enabled: boolean;
  last_triggered_at?: string;
  failure_count: number /* int */;
  created_at: string;
  updated_at: string;
}
/**
 * WebhookEvent represents event for webhook
 */
export interface WebhookEvent {
  type: string;
  timestamp: string;
  data: { [key: string]: any};
}
